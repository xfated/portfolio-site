[{"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\experience.js":"1","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Timeline.js":"2","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Header.js":"3","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Decrypt.js":"4","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\index.js":"5","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\myinfo.js":"6","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\theme.js":"7","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\AboutMe.js":"8","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Description.js":"9","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Icon.js":"10","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Main.js":"11","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Footer.js":"12","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Projects.js":"13","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\projects.js":"14"},{"size":5804,"mtime":1615303231963,"results":"15","hashOfConfig":"16"},{"size":5963,"mtime":1615306079389,"results":"17","hashOfConfig":"16"},{"size":3304,"mtime":1613059695738,"results":"18","hashOfConfig":"16"},{"size":1787,"mtime":1612576567695,"results":"19","hashOfConfig":"16"},{"size":643,"mtime":1612974061148,"results":"20","hashOfConfig":"16"},{"size":1084,"mtime":1615303023409,"results":"21","hashOfConfig":"16"},{"size":546,"mtime":1612580132955,"results":"22","hashOfConfig":"16"},{"size":462,"mtime":1615298623942,"results":"23","hashOfConfig":"16"},{"size":3161,"mtime":1615302736395,"results":"24","hashOfConfig":"16"},{"size":284,"mtime":1613058662040,"results":"25","hashOfConfig":"16"},{"size":495,"mtime":1613315063907,"results":"26","hashOfConfig":"16"},{"size":682,"mtime":1613063867933,"results":"27","hashOfConfig":"16"},{"size":4048,"mtime":1615308394895,"results":"28","hashOfConfig":"16"},{"size":6784,"mtime":1615308904371,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mlyq5n",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\experience.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Timeline.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Header.js",["63","64","65","66","67","68","69","70","71"],"import React, { Component } from 'react';\r\nimport { Row, Container, Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { MyInfo } from '../profile/myinfo';\r\nimport Decrypt from './Decrypt';\r\nimport { Theme } from '../profile/theme';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            user: MyInfo.firstname +  ' ' + MyInfo.lastname,\r\n            mounted: false,\r\n            description: MyInfo.description\r\n        }\r\n\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.resizedScreen = this.resizedScreen.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n    \r\n    componentDidMount(){\r\n        window.addEventListener(\"resize\", this.resizedScreen());\r\n        this.setState({\r\n            mounted: true\r\n        });\r\n    }\r\n\r\n    resizedScreen() {\r\n        if (window.innerWidth <= 576) {\r\n            this.setState({ user: MyInfo.firstname})\r\n        }\r\n        else {\r\n            this.setState({ user: MyInfo.firstname + ' ' + MyInfo.lastname})\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const desc = this.state.description.split('\\n').map((line, i) => {\r\n            return (\r\n                <span key={line+i}>{line}<br /></span>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron style={{ backgroundImage: `url('assets/images/wallpaper.jfif')`, backgroundSize: 'cover', \r\n                                borderRadius: \"0px\"}}>\r\n                    <Container className=\"text-center\">\r\n                        <h1 className=\"display-3 profile-header\">\r\n                            <Decrypt text={this.state.user} time='1500'/>\r\n                        </h1>\r\n                        <CSSTransition in={this.state.mounted} classNames=\"profile-desc-trans\" timeout={1000}>\r\n                            <p className=\"lead profile-desc\">{desc}</p>\r\n                        </CSSTransition>\r\n                    </Container>\r\n                </Jumbotron>\r\n                <div className=\"divider\"></div> \r\n                {/* <Navbar color='light' light expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarBrand href=\"/\">\r\n                            My Journey\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav className=\"mr-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/\">\r\n                                        Projects\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n                <div className=\"divider\"></div>  */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Decrypt.js",["72","73"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst Decrypt = (props) => {\r\n\r\n    const total_time = parseInt(props.time,10);\r\n    const word = props.text;\r\n    const time_per_letter = total_time / word.length;\r\n    const letters = \"qwertyuiopasdfghjklzxcvbnm1234567890!@#$%^&*()_=\";\r\n    const num_letters = letters.length;\r\n    var initText = props.text;\r\n\r\n    // To update string\r\n    String.prototype.replaceAt = function(index, replacement) {\r\n        return this.substr(0, index) + replacement + this.substr(index + replacement.length);\r\n    }\r\n    for (var i = 0; i < word.length; i++){\r\n        initText = initText.replaceAt(i, letters[Math.floor(Math.random() * num_letters)]);\r\n    }\r\n\r\n    // Init states\r\n    const [text, setText] = useState(initText);\r\n    const [count, setCount] = useState(0);\r\n\r\n    // Functions to update letters\r\n    const updateWord = (letter, time) => {\r\n        return setTimeout(() => {\r\n            // Update new string for remainder\r\n            var remainder = '';\r\n            for (var i = 0; i < word.length - count - 1; i++){\r\n                remainder = remainder +  letters[Math.floor(Math.random() * num_letters)];\r\n            }\r\n            // Update string with next letter + remaining shuffled letters\r\n            setText(text.substr(0,count) + letter + remainder);\r\n            \r\n            setCount(count + 1);\r\n        }, time);\r\n    }\r\n\r\n    const animateDecrypt = () => {\r\n\r\n        for (var i = 0; i < word.length; i++){\r\n            updateWord(props.text[count], time_per_letter)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (count < props.text.length){\r\n            animateDecrypt();\r\n        }\r\n    }, [count])\r\n    \r\n\r\n    return(\r\n        <span>{text}</span>\r\n    );    \r\n}\r\n\r\nexport default Decrypt;\r\n",["74","75"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\index.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\myinfo.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\theme.js",[],["76","77"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\AboutMe.js",["78"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Description.js",["79"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Icon.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Main.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Footer.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Projects.js",["80","81","82","83"],"import React, {useState} from 'react';\r\nimport { Card, CardImg, CardBody, CardImgOverlay, CardTitle, CardText,\r\n        Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport { ExpProjects } from '../profile/projects.js';\r\nimport './Projects.css';\r\n\r\n// create list for modal status\r\nconst numProjects = ExpProjects.length;\r\nconst initModalList = new Array(numProjects);\r\nfor (var i=0; i < numProjects; i++) {initModalList[i] = false;}\r\n\r\nconst Projects = (props) => {\r\n\r\n    const [modalList, setModalList] = useState(initModalList);\r\n    \r\n    function toggleProjectModal(idx){\r\n        return () => {\r\n            let newList = [...modalList];\r\n            newList[idx] = !newList[idx]\r\n            setModalList(newList)\r\n        }\r\n    }\r\n\r\n    function RenderProject( {project, toggleModal, key} ){\r\n        return (\r\n            <a style={{cursor:'pointer'}} onClick={toggleModal}>\r\n                <Card className=\"project-card\" key={key}>\r\n                    <div className=\"project-card-img flex flex-horizontal-center flex-vertical-center border-bottom\" >\r\n                        <div className=\"project-card-img-frame p-2\">\r\n                            <img style={{ width:\"100%\", maxHeight:\"100%\"}} src={project.image} alt={project.title} />\r\n                        </div>\r\n                    </div>\r\n                    <CardBody>\r\n                        <CardTitle tag=\"h5\">{project.title}</CardTitle>\r\n                        <CardText>\r\n                            {project.briefdesc}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </a>\r\n        );\r\n    };\r\n\r\n    const ProjectCards = (category) => { \r\n        return ExpProjects.map((project, idx) => {\r\n            const toggleModal = toggleProjectModal(idx);\r\n            const project_desc = project.details.split('\\n').map((line,i) => {\r\n                return (\r\n                    <span key={line+i}>{line}<br /></span>\r\n                )\r\n            });\r\n            \r\n            if (project.category===category){\r\n                return (\r\n                    <div className=\"col-6 col-md-4\">\r\n                        <div>\r\n                            <RenderProject project={project} toggleModal={toggleModal} key={project.title} />\r\n                            <Modal isOpen={modalList[idx]} toggle={toggleModal}>\r\n                                <ModalHeader toggle={toggleModal} charCode=\"x\">\r\n                                    {project.title}\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                    {project_desc}\r\n                                </ModalBody>\r\n                            </Modal>\r\n                        </div>  \r\n                    </div>\r\n                );\r\n            }\r\n            else{\r\n                return(\r\n                    <></>\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className=\"project-section\">\r\n            <div className=\"section-header col-12 text-center\">\r\n                <h1 className=\"mb-0\">Projects</h1>\r\n                <p>Stuff I'd say I'm proud of</p>\r\n            </div>\r\n            <div className=\"flex flex-horizontal-center\">\r\n                <div className=\"project-container\">\r\n                    <div className=\"row mb-5 text-left\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"p-2 border-bottom border-dark mb-4\">Competitions</h3>\r\n                        </div>\r\n                        {ProjectCards('competition')}\r\n                    </div>\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"p-2 border-bottom border-dark mb-4\">Hackathons</h3>\r\n                        </div>\r\n                        {ProjectCards('hackathon')}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Projects;","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\projects.js",[],{"ruleId":"84","severity":1,"message":"85","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},{"ruleId":"84","severity":1,"message":"88","line":2,"column":26,"nodeType":"86","messageId":"87","endLine":2,"endColumn":32},{"ruleId":"84","severity":1,"message":"89","line":2,"column":34,"nodeType":"86","messageId":"87","endLine":2,"endColumn":45},{"ruleId":"84","severity":1,"message":"90","line":2,"column":47,"nodeType":"86","messageId":"87","endLine":2,"endColumn":50},{"ruleId":"84","severity":1,"message":"91","line":2,"column":52,"nodeType":"86","messageId":"87","endLine":2,"endColumn":65},{"ruleId":"84","severity":1,"message":"92","line":2,"column":67,"nodeType":"86","messageId":"87","endLine":2,"endColumn":75},{"ruleId":"84","severity":1,"message":"93","line":2,"column":77,"nodeType":"86","messageId":"87","endLine":2,"endColumn":84},{"ruleId":"84","severity":1,"message":"94","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":17},{"ruleId":"84","severity":1,"message":"95","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":15},{"ruleId":"96","severity":1,"message":"97","line":13,"column":5,"nodeType":"98","messageId":"99","endLine":15,"endColumn":6},{"ruleId":"100","severity":1,"message":"101","line":50,"column":8,"nodeType":"102","endLine":50,"endColumn":15,"suggestions":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"104","replacedBy":"108"},{"ruleId":"106","replacedBy":"109"},{"ruleId":"84","severity":1,"message":"110","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":39,"column":25,"nodeType":"113","endLine":39,"endColumn":101},{"ruleId":"84","severity":1,"message":"114","line":2,"column":16,"nodeType":"86","messageId":"87","endLine":2,"endColumn":23},{"ruleId":"84","severity":1,"message":"115","line":2,"column":35,"nodeType":"86","messageId":"87","endLine":2,"endColumn":49},{"ruleId":"84","severity":1,"message":"116","line":3,"column":40,"nodeType":"86","messageId":"87","endLine":3,"endColumn":51},{"ruleId":"117","severity":1,"message":"118","line":26,"column":13,"nodeType":"113","endLine":26,"endColumn":65},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'Nav' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Theme' is defined but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'animateDecrypt' and 'props.text.length'. Either include them or remove the dependency array.","ArrayExpression",["119"],"no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"'Component' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'CardImg' is defined but never used.","'CardImgOverlay' is defined but never used.","'ModalFooter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"desc":"122","fix":"123"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [animateDecrypt, count, props.text.length]",{"range":"124","text":"125"},[1685,1692],"[animateDecrypt, count, props.text.length]"]