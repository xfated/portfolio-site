[{"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\experience.js":"1","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Timeline.js":"2","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Header.js":"3","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Decrypt.js":"4","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\index.js":"5","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\myinfo.js":"6","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\theme.js":"7","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\AboutMe.js":"8","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Description.js":"9","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Icon.js":"10","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Main.js":"11","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Footer.js":"12","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Projects.js":"13","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\projects.js":"14","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\App.js":"15","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\reportWebVitals.js":"16"},{"size":5804,"mtime":1615303231963,"results":"17","hashOfConfig":"18"},{"size":5963,"mtime":1615306079389,"results":"19","hashOfConfig":"18"},{"size":3282,"mtime":1615826684898,"results":"20","hashOfConfig":"18"},{"size":1815,"mtime":1615826358112,"results":"21","hashOfConfig":"18"},{"size":643,"mtime":1612974061148,"results":"22","hashOfConfig":"18"},{"size":1084,"mtime":1615303023409,"results":"23","hashOfConfig":"18"},{"size":546,"mtime":1612580132955,"results":"24","hashOfConfig":"18"},{"size":447,"mtime":1615826276744,"results":"25","hashOfConfig":"18"},{"size":3192,"mtime":1615826583545,"results":"26","hashOfConfig":"18"},{"size":284,"mtime":1613058662040,"results":"27","hashOfConfig":"18"},{"size":495,"mtime":1613315063907,"results":"28","hashOfConfig":"18"},{"size":682,"mtime":1613063867933,"results":"29","hashOfConfig":"18"},{"size":6551,"mtime":1615826551677,"results":"30","hashOfConfig":"18"},{"size":11314,"mtime":1615822633256,"results":"31","hashOfConfig":"18"},{"size":275,"mtime":1612277910245,"results":"32","hashOfConfig":"18"},{"size":362,"mtime":1607998709303,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ie9svr",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\experience.js",[],["72","73"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Timeline.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Header.js",["74","75","76","77","78","79","80"],"import React, { Component } from 'react';\r\nimport { Container, Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { MyInfo } from '../profile/myinfo';\r\nimport Decrypt from './Decrypt';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            user: MyInfo.firstname +  ' ' + MyInfo.lastname,\r\n            mounted: false,\r\n            description: MyInfo.description\r\n        }\r\n\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.resizedScreen = this.resizedScreen.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n    \r\n    componentDidMount(){\r\n        window.addEventListener(\"resize\", this.resizedScreen());\r\n        this.setState({\r\n            mounted: true\r\n        });\r\n    }\r\n\r\n    resizedScreen() {\r\n        if (window.innerWidth <= 576) {\r\n            this.setState({ user: MyInfo.firstname})\r\n        }\r\n        else {\r\n            this.setState({ user: MyInfo.firstname + ' ' + MyInfo.lastname})\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const desc = this.state.description.split('\\n').map((line, i) => {\r\n            return (\r\n                <span key={line+i}>{line}<br /></span>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron style={{ backgroundImage: `url('${process.env.PUBLIC_URL}/assets/images/wallpaper.jfif')`, backgroundSize: 'cover', \r\n                                borderRadius: \"0px\"}}>\r\n                    <Container className=\"text-center\">\r\n                        <h1 className=\"display-3 profile-header\">\r\n                            <Decrypt text={this.state.user} time='1500'/>\r\n                        </h1>\r\n                        <CSSTransition in={this.state.mounted} classNames=\"profile-desc-trans\" timeout={1000}>\r\n                            <p className=\"lead profile-desc\">{desc}</p>\r\n                        </CSSTransition>\r\n                    </Container>\r\n                </Jumbotron>\r\n                <div className=\"divider\"></div> \r\n                {/* <Navbar color='light' light expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarBrand href=\"/\">\r\n                            My Journey\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav className=\"mr-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/\">\r\n                                        Projects\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n                <div className=\"divider\"></div>  */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Decrypt.js",["81","82"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst Decrypt = (props) => {\r\n\r\n    const total_time = parseInt(props.time,10);\r\n    const word = props.text;\r\n    const time_per_letter = total_time / word.length;\r\n    const letters = \"qwertyuiopasdfghjklzxcvbnm1234567890!@#$%^&*()_=\";\r\n    const num_letters = letters.length;\r\n    var initText = props.text;\r\n\r\n    // To update string\r\n    String.prototype.replaceAt = function(index, replacement) {\r\n        return this.substr(0, index) + replacement + this.substr(index + replacement.length);\r\n    }\r\n    for (var i = 0; i < word.length; i++){\r\n        initText = initText.replaceAt(i, letters[Math.floor(Math.random() * num_letters)]);\r\n    }\r\n\r\n    // Init states\r\n    const [text, setText] = useState(initText);\r\n    const [count, setCount] = useState(0);\r\n\r\n    // Functions to update letters\r\n    const updateWord = (letter, time) => {\r\n        return setTimeout(() => {\r\n            // Update new string for remainder\r\n            var remainder = '';\r\n            for (var i = 0; i < word.length - count - 1; i++){\r\n                remainder = remainder +  letters[Math.floor(Math.random() * num_letters)];\r\n            }\r\n            // Update string with next letter + remaining shuffled letters\r\n            setText(text.substr(0,count) + letter + remainder);\r\n            \r\n            setCount(count + 1);\r\n        }, time);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const animateDecrypt = () => {\r\n            for (var i = 0; i < word.length; i++){\r\n                updateWord(props.text[count], time_per_letter)\r\n            }\r\n        }\r\n        \r\n        if (count < props.text.length){\r\n            animateDecrypt();\r\n        }\r\n    }, [count])\r\n    \r\n\r\n    return(\r\n        <span>{text}</span>\r\n    );    \r\n}\r\n\r\nexport default Decrypt;\r\n","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\index.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\myinfo.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\theme.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\AboutMe.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Description.js",["83"],"import React from 'react';\r\nimport { MyInfo } from '../profile/myinfo'\r\nimport { saveAs }  from 'file-saver';\r\nimport { Button } from 'reactstrap';\r\nimport './Description.css';\r\n\r\nconst Description = (props) => {\r\n\r\n    const saveFile = () => {\r\n        saveAs(\r\n            MyInfo.resume, `${(MyInfo.firstname).replaceAll(/\\s/g,'')}${(MyInfo.lastname).replaceAll(/\\s/g,'')}_Resume.pdf`\r\n        );\r\n    }\r\n\r\n    const profile_desc = MyInfo.profile_info.split('\\n').map((line,i) => {\r\n        return (\r\n            <span key={line+i}>{line}<br /></span>\r\n        )\r\n    });\r\n\r\n    const titles = MyInfo.titles.split('\\n').map((line,i) => {\r\n        return (\r\n            <span key={line+i}><strong>{line}</strong><br /></span>\r\n        )\r\n    });\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"profile-container flex\">\r\n                <div className=\"col-12 text-center section-header\">\r\n                    <br/>\r\n                    <h1 className=\"mb-0\">About Myself</h1>\r\n                    <small>A small introduction</small>\r\n                    <br/>\r\n                </div>\r\n                <div className=\"col-12 col-md-6 flex flex-horizontal-center\">\r\n                    <div className=\"profile-pic-frame\">\r\n                        <img className=\"profile-pic\" src={`${process.env.PUBLIC_URL}/${MyInfo.displaypic}`} alt='profile picture'/>\r\n                    </div>\r\n                </div>    \r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"col-12 profile-info\">\r\n                        <div className=\"block text-justify\">\r\n                            <br />\r\n                            <h6>{titles}</h6>\r\n                            <br />\r\n                            {profile_desc}\r\n                            <br /> <br /> \r\n                            <blockquote className=\"blockquote text-center\">\r\n                                <i className=\"fa fa-quote-left fa-pull-left\"></i>\r\n                                <p className=\"mb-0\">\r\n                                    {MyInfo.quote}\r\n                                </p>\r\n                                <i className=\"fa fa-quote-right fa-pull-right\"></i>\r\n                                <footer className=\"blockquote-footer\">\r\n                                    <cite title=\"Source Title\">{MyInfo.quote_source}</cite>\r\n                                </footer>\r\n                            </blockquote>\r\n                            <br /> <br />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <Button className=\"resume-download\" onClick={saveFile}>Resume</Button>\r\n                    </div>\r\n                    <div className=\"col-12 profile-social\">\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href={MyInfo.linkedin}> <i className=\"fa fa-linkedin\"></i> </a>\r\n                        <a className=\"btn btn-social-icon btn-github\" href={MyInfo.github}> <i className=\"fa fa-github\"></i> </a>\r\n                    </div>\r\n                </div>               \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Description;","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Icon.js",[],["84","85"],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Main.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Footer.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\components\\Projects.js",["86","87","88"],"import React, {useState} from 'react';\r\nimport { Card, CardImg, CardBody, CardImgOverlay, CardTitle, CardText,\r\n        Modal, ModalHeader, ModalBody, ModalFooter, Button} from 'reactstrap';\r\nimport { ExpProjects } from '../profile/projects.js';\r\nimport './Projects.css';\r\n\r\n// create list for modal status\r\nconst numProjects = ExpProjects.length;\r\nconst initModalList = new Array(numProjects);\r\nfor (var i=0; i < numProjects; i++) {initModalList[i] = false;}\r\n\r\nconst Projects = (props) => {\r\n\r\n    const [modalList, setModalList] = useState(initModalList);\r\n    \r\n    function toggleProjectModal(idx){\r\n        return () => {\r\n            let newList = [...modalList];\r\n            newList[idx] = !newList[idx]\r\n            setModalList(newList)\r\n        }\r\n    }\r\n\r\n    function RenderProject( {project, toggleModal, key} ){\r\n        return (\r\n            <a style={{cursor:'pointer'}} onClick={toggleModal}>\r\n                <Card className=\"project-card\" key={key}>\r\n                    <div className=\"project-card-img mt-0 mb-0\">\r\n                        <CardImg style={{height:\"100%\", objectFit:\"cover\"}} src={`${process.env.PUBLIC_URL}/${project.image}`} alt={project.title}></CardImg>\r\n                    </div>\r\n                    <CardBody>\r\n                        <CardTitle tag=\"h5\">{project.title}</CardTitle>\r\n                        <CardText>\r\n                            {project.briefdesc}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </a>\r\n        );\r\n    };\r\n\r\n    const ProjectCards = (category) => { \r\n        return ExpProjects.map((project, idx) => {\r\n            const toggleModal = toggleProjectModal(idx);\r\n            const project_desc = project.details.map((line,i) => {\r\n                /* Title */\r\n                if (line.includes(\"<h3>\")){\r\n                    return <h3 className=\"project-modal-title border-bottom\" key={line+i}><strong>{line.replace(\"<h3>\",\"\")}</strong></h3>\r\n                }\r\n                if (line.includes(\"<h6>\")){\r\n                    return <h6 key={line+i}>{line.replace(\"<h6>\",\"\")}</h6>\r\n                }\r\n                /* Bold */\r\n                if (line.includes(\"**\")){\r\n                    const sentence = line.split(\"**\").map((part,i) => {\r\n                        return (i%2!=0) ? <strong>{part}</strong> : <span>{part}</span>;\r\n                    });\r\n                    return (\r\n                        <span className=\"project-modal-text\" key={line+i}>{sentence}<br/></span>\r\n                    )\r\n                }\r\n                /* Emphasis on first word */\r\n                if (line.includes(\"<boldfirst>\")){\r\n                    line = line.replace(\"<boldfirst>\",\"\");\r\n                    let spaceIndex = line.indexOf(' ');\r\n                    return (\r\n                        <span className=\"project-modal-text\">\r\n                            <strong>{line.substring(0,spaceIndex)}</strong>\r\n                            <span>{line.substring(spaceIndex, line.length)}</span>\r\n                            <br />\r\n                        </span>\r\n                    );\r\n                }\r\n                return (\r\n                        <span className=\"project-modal-text\" key={line+i}>{line}<br /></span>\r\n                    )\r\n            });\r\n            \r\n            if (project.category===category){\r\n                return (\r\n                    <div className=\"col-6 col-md-4 col-lg-3 p-4\">\r\n                        <div>\r\n                            <RenderProject project={project} toggleModal={toggleModal} key={project.title} />\r\n                            <Modal isOpen={modalList[idx]} toggle={toggleModal} className=\"modal-w80\">\r\n                                <ModalHeader toggle={toggleModal} charCode=\"x\" className=\"flex\">\r\n                                    {project.title}\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                    <div className=\"col-12 mb-3 flex flex-vertical-center\">\r\n                                        <span className=\"project-modal-title\" style={{fontSize:\"1.75rem\"}}><strong>Link:&emsp;</strong></span> \r\n                                        <Button outline className=\"project-modal-text\" color=\"secondary\" href={project.link}>{project.linktitle}</Button>\r\n                                    </div>\r\n                                    <div className=\"col-12\">\r\n                                        {project_desc}\r\n                                    </div>\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <div className=\"ml-auto\">\r\n                                        <cite>Completed in</cite> <strong>2020</strong>\r\n                                    </div>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </div>  \r\n                    </div>\r\n                );\r\n            }\r\n            else{\r\n                return(\r\n                    <></>\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className=\"project-section\">\r\n            <div className=\"section-header col-12 text-center\">\r\n                <h1 className=\"mb-0\">Projects</h1>\r\n                <p>Stuff I'd say I'm proud of</p>\r\n            </div>\r\n            <div className=\"flex flex-horizontal-center\">\r\n                <div className=\"project-container\">\r\n                    <div className=\"row mb-5 text-left\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"p-2 border-bottom border-dark mb-4\">Competitions</h3>\r\n                        </div>\r\n                        {ProjectCards('competition')}\r\n                    </div>\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"p-2 border-bottom border-dark mb-4\">Hackathons</h3>\r\n                        </div>\r\n                        {ProjectCards('hackathon')}\r\n                    </div>\r\n                    <div className=\"row mb-5\">\r\n                        <div className=\"col-12\">\r\n                            <h3 className=\"p-2 border-bottom border-dark mb-4\">Side Projects</h3>\r\n                        </div>\r\n                        {ProjectCards('sideproject')}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Projects;","C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\profile\\projects.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\App.js",[],"C:\\Users\\User\\Documents\\Portfolio\\portfolio-site\\src\\reportWebVitals.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":21,"nodeType":"95","messageId":"96","endLine":2,"endColumn":27},{"ruleId":"93","severity":1,"message":"97","line":2,"column":29,"nodeType":"95","messageId":"96","endLine":2,"endColumn":40},{"ruleId":"93","severity":1,"message":"98","line":2,"column":42,"nodeType":"95","messageId":"96","endLine":2,"endColumn":45},{"ruleId":"93","severity":1,"message":"99","line":2,"column":47,"nodeType":"95","messageId":"96","endLine":2,"endColumn":60},{"ruleId":"93","severity":1,"message":"100","line":2,"column":62,"nodeType":"95","messageId":"96","endLine":2,"endColumn":70},{"ruleId":"93","severity":1,"message":"101","line":2,"column":72,"nodeType":"95","messageId":"96","endLine":2,"endColumn":79},{"ruleId":"93","severity":1,"message":"102","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":13,"column":5,"nodeType":"105","messageId":"106","endLine":15,"endColumn":6},{"ruleId":"107","severity":1,"message":"108","line":50,"column":8,"nodeType":"109","endLine":50,"endColumn":15,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":39,"column":25,"nodeType":"113","endLine":39,"endColumn":132},{"ruleId":"89","replacedBy":"114"},{"ruleId":"91","replacedBy":"115"},{"ruleId":"93","severity":1,"message":"116","line":2,"column":35,"nodeType":"95","messageId":"96","endLine":2,"endColumn":49},{"ruleId":"117","severity":1,"message":"118","line":26,"column":13,"nodeType":"113","endLine":26,"endColumn":65},{"ruleId":"119","severity":1,"message":"120","line":56,"column":36,"nodeType":"121","messageId":"106","endLine":56,"endColumn":38},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'NavbarBrand' is defined but never used.","'Nav' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.text', 'time_per_letter', 'updateWord', and 'word.length'. Either include them or remove the dependency array.","ArrayExpression",["124"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["122"],["123"],"'CardImgOverlay' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},"Update the dependencies array to be: [count, props.text, time_per_letter, updateWord, word.length]",{"range":"127","text":"128"},[1713,1720],"[count, props.text, time_per_letter, updateWord, word.length]"]